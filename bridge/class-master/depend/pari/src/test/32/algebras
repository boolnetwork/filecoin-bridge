  ***   Warning: new stack size = 100000000 (95.367 Mbytes).
contains nfabs: 1
[[x^4 + x^3 + x^2 + x + 1, [1], [125, 5], 1, [], [], [[1, x, x^2, x^3], [1, 
1, 1, 1]], [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], 1, [y, [1, 0], 
1, 1, [Mat(1), Mat(1), Mat(1), Mat(1), 1, Mat(1), [1, 0], []], [0.E-57], [1]
, Mat(1), Mat(1)], [x^4 + x^3 + x^2 + x + 1, 0, 0, y, x^4 + x^3 + x^2 + x + 
1], [0, [[1; 0; 0; 0], Mat(1), 1, Vecsmall([1])]]], [x^2, -x^3 - x^2 - x - 1
, x^3], Mod(3, y), Vecsmall([0]), [[[3, [3]~, 1, 1, 1], [5, [5]~, 1, 1, 1]],
 Vecsmall([3, 1])], 0, [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0,
 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0,
 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0
, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, -1, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, -1, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0
, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 
0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 
0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0,
 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0,
 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1
, 1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1; 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, -1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 
0], [0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 
0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 1, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0
, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 
0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
0, -1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1; 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 1, -1], [0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0; 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0; 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0
, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, -1, 0, 
0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 
0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0; 0, 0, 0, 0,
 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0
, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0; 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 
0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 3, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0;
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 3; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1,
 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, -3, 0, 3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0; 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 3, -3, 0, 0; 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0; 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, -1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0; 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, -1, 0,
 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0,
 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 1
, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0
, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 
0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3; 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 3, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -3; 0, 0, -1, 1, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0; 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, -1, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
; 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 
0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0; 0, 0, 0,
 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, -3, 3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0; 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3
, 0, 0, 0; 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 0, 1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0; 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 
-1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, -1, 0
, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0; 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -
1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0], [0, 0, 0
, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,
 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0
, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3; 1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1
, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
, [0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 0, 3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 3, 0, 0, 0, 0; 0,
 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, -3, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3; 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 3, -3, 0, 0; 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, 0, -1,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0; 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
 -1, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0
, 0; 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, -1, 
0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0
; 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0
, -3, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 3, -3, 0, 0, 0, 0, 0, 0; 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 3, 0, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, -3; 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -3; 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0; 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, -1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0,
 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
 0; 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, -3, 3, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, -3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0,
 3, -3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0; 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -3, 0, 0, 3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0; 0, -1, 1,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, -1, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0
, 0, 0; 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0
, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 
0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 3, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 
0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0
, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 
0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0;
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3; 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 
0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 3, 0, -3, 0, 0, 0, 0, 0, 0,
 0, 0, 0; 0, 0, 0, 0, 0, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
 0, 0, -3, 3, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0
, 0; 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 3, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0
, -3, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0; 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, -3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -3, 0, 0; 0, 0,
 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0; 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, -
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0; 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -
3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 
0, 0, 0, -3, 0, 3, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0,
 0; 0, 0, 0, 0, 0, 0, 0, 0, 3, -3, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, -3; 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, -3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 3, -3; 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 
-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0; 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 
0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 3, 0, 0, -3, 0, 0, 0, 0,
 0, 0, 0, 0; 0, 0, 0, 0, 0, 3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
 0, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0
, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0
, 0, 3, 0, -3, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -3, 0, 0, 0, 0, 
0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, -3, 0, 3, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 3; 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0; 0, -1, 1, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0; 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0]], 0, [16, -4, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Suite: all
Suite: get
degree: 1
center: 1
splitting: 1
automorphism: 1
b: 1
trivial hasse invariants: 1
charac: 1
dim: 1
absdim: 1
basis: 1
invbasis: 1
basis*invbasis: 1
iscyclic: 1
radical: 1
Suite: operations
radical: 1
addition: 1
negation: 1
soustraction: 1
multiplication: 1
non-commutativity: 0
left division: 1
right division: 1
noncommutative left division: 1
noncommutative right division: 1
division by non-invertible: error("impossible inverse in algdivl: [Mod(Mod(-
1, i^2 + 1)*s, s^2 + 2), Mod(Mod(i - 1, i^2 + 1), s^2 + 2)]~.")
nilpotent: 1
square: 1
square j: 1
inverse: 1
powers: 1
negative powers: 1
multiplication table j: 1
multiplication table: 1
characteristic polynomial: 1
characteristic polynomial j: 1
trace zero: 1
trace commutator: 1
trace: 1
norm zero: 1
norm one: 1
norm j: 1
norm is multiplicative a*b: 1
norm is multiplicative b*a: 1
poleval: 1
poleval b: 1
Suite: tensor product of cyclic algebras
radical 1: 1
radical 2: 1
radical 3: 1
tensor of degree 2 and 3 no mo: 1
Suite: Grunwald-Wang
A quadratic over Q, 2 large inert, imaginary: 1
A quartic over Q, 2 large inert, imaginary: error("sorry, nfgrunwaldwang for
 non-prime degree is not yet implemented.")
A : degree 4 over Q(i), local degrees [4,1,1]: 1
A degree 3 over Q(j), local degrees [3,3] larger primes: 1
A : degree 3 over Q(sqrt(5)), local degrees [3,3] [0,0], larger primes: 1
A : degree 5 over Q(sqrt(7)), local degrees [5,5,5,5,5,5,5] [0,0]: 1
A : degree 9 over Q(zeta_9), local degrees [9,9,9,9]: 1
A degree 2 over totally real sextic, local degrees [2,2] [2,2,2,2,2,2], larg
er primes: 1
A degree 2 over totally real sextic, local degrees [] [2,2,2,2,2,2]: 1
Suite: more operations
construct algebra: [[x^3 - 21*x + 7, [1], [49, 1], 27, [], [], [[1, x + 1, x
^2 - x - 2], [1, 1/3, Mat(1/9)]], [1, -1, 1; 0, 1, 1; 0, 0, 1], 27, [y, [1, 
0], 1, 1, [Mat(1), Mat(1), Mat(1), Mat(1), 1, Mat(1), [1, 0], []], [0.E-57],
 [1], Mat(1), Mat(1)], [x^3 - 21*x + 7, 0, 0, y, x^3 - 21*x + 7], [[x^3 - 21
*x + 7, [3, 0], 49, 27, [[1, -1.2469796037174670610500097680084796213, 1.801
9377358048382524722046390148901023; 1, 0.44504186791262880857780512899358951
893, -1.2469796037174670610500097680084796213; 1, 1.801937735804838252472204
6390148901023, 0.44504186791262880857780512899358951893], [1, -1.24697960371
74670610500097680084796213, 1.8019377358048382524722046390148901023; 1, 0.44
504186791262880857780512899358951893, -1.24697960371746706105000976800847962
13; 1, 1.8019377358048382524722046390148901023, 0.44504186791262880857780512
899358951893], [1, -1, 2; 1, 0, -1; 1, 2, 0], [3, 1, 1; 1, 5, -2; 1, -2, 5],
 [7, 0, 5; 0, 7, 5; 0, 0, 1], [3, -1, -1; -1, 2, 1; -1, 1, 2], [7, [2, 1, -1
; 1, 3, 1; 0, 1, 2]], []], [-4.7409388111524011831500293040254388638, 0.3351
2560373788642573341538698076855680, 4.4058132074145147574166139170446703070]
, [9, 3*x + 3, x^2 - x - 11], [1, -1, 10; 0, 3, 3; 0, 0, 9], [1, 0, 0, 0, 1,
 -1, 0, -1, 2; 0, 1, 0, 1, 1, 1, 0, 1, -1; 0, 0, 1, 0, 1, 0, 1, 0, 0]], [[1;
 0; 0], Mat(1), 1, Vecsmall([1])]]], [-1/3*x^2 - 2/3*x + 14/3, 1/3*x^2 - 1/3
*x - 14/3], Mod(-6, y), Vecsmall([0]), [[[2, [2]~, 1, 1, 1], [3, [3]~, 1, 1,
 1], [7, [7]~, 1, 1, 1]], Vecsmall([1, 2, 0])], 0, [1, 0, 0, 0, 0, 4/7, 0, 4
/7, 5/7; 0, 1, 0, 0, 0, 4/7, 0, 2/7, 5/7; 0, 0, 1, 0, 0, 5/7, 0, 0, 1/7; 0, 
0, 0, 1, 0, 5/7, 0, 1/7, 5/7; 0, 0, 0, 0, 1, 5/7, 0, 4/7, 5/7; 0, 0, 0, 0, 0
, 1/7, 0, 0, 1/7; 0, 0, 0, 0, 0, 0, 1, 2/7, 5/7; 0, 0, 0, 0, 0, 0, 0, 1/7, 5
/7; 0, 0, 0, 0, 0, 0, 0, 0, 1/7], [1, 0, 0, 0, 0, -4, 0, -4, 19; 0, 1, 0, 0,
 0, -4, 0, -2, 9; 0, 0, 1, 0, 0, -5, 0, 0, 4; 0, 0, 0, 1, 0, -5, 0, -1, 5; 0
, 0, 0, 0, 1, -5, 0, -4, 20; 0, 0, 0, 0, 0, 7, 0, 0, -7; 0, 0, 0, 0, 0, 0, 1
, -2, 5; 0, 0, 0, 0, 0, 0, 0, 7, -35; 0, 0, 0, 0, 0, 0, 0, 0, 7], [[1, 0, 0,
 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 
0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0
; 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 0, 0, 0, 0, 0,
 0, 1], [0, 1, -1, 4, 4, 5, 19, 8, 17; 1, 1, 1, 4, 4, 7, 9, 6, 12; 0, 1, 0, 
5, 5, 7, 4, 5, 10; 0, 0, 0, 6, 5, 7, 5, 5, 10; 0, 0, 0, 4, 4, 5, 20, 8, 17; 
0, 0, 0, -7, -7, -9, -7, -7, -14; 0, 0, 0, 0, 0, 0, 5, 1, 2; 0, 0, 0, 0, 0, 
0, -35, -9, -21; 0, 0, 0, 0, 0, 0, 7, 2, 5], [0, -1, 2, 0, -4, -2, -15, -9, 
-22; 0, 1, -1, 0, -4, -3, -7, -5, -11; 1, 0, 0, 0, -5, -3, -4, -4, -8; 0, 0,
 0, 0, -4, -3, -4, -4, -8; 0, 0, 0, 1, -4, -2, -16, -9, -22; 0, 0, 0, 0, 7, 
5, 7, 7, 14; 0, 0, 0, 0, 0, 0, -2, -1, -3; 0, 0, 0, 0, 0, 0, 28, 12, 35; 0, 
0, 0, 0, 0, 0, -7, -3, -9], [0, 0, -4, 0, -4, -3, -6, -4, -5; 0, 0, -4, 0, -
2, -3, 0, -2, -5; 0, 0, -5, 0, 0, -3, 0, 0, -1; 1, 0, -5, 0, -1, -3, 0, 0, 0
; 0, 1, -5, 0, -4, -3, 0, -2, 0; 0, 0, 7, 0, 0, 4, 0, 0, 0; 0, 0, 0, 1, -2, 
0, 0, -1, 0; 0, 0, 0, 0, 7, 0, 0, 4, 0; 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, -4, 
0, -15, -15, -21, 0, -11, -19; 0, -4, 0, -7, -7, -11, 0, -7, -15; 0, -5, 0, 
-4, -4, -8, -6, -6, -13; 0, -4, -1, -4, -4, -8, 0, -4, -8; 1, -4, 1, -16, -1
6, -21, 0, -12, -22; 0, 7, 0, 7, 7, 13, 0, 7, 14; 0, 0, 0, -2, -3, -3, 0, -2
, -3; 0, 0, 0, 28, 28, 35, 0, 20, 35; 0, 0, 0, -7, -7, -9, 0, -5, -9], [0, -
3, -2, -9, -12, -15, -5, -12, -23; 0, -1, -3, -3, -6, -8, 1, -6, -14; 0, -3,
 -3, 0, -3, -6, -4, -4, -9; 0, -3, -4, 1, -3, -6, 0, -3, -6; 0, -2, -3, -9, 
-12, -15, 0, -11, -21; 1, 5, 5, 1, 5, 11, 1, 6, 12; 0, 0, 0, -1, -3, -2, 2, 
-2, -3; 0, 0, 0, 21, 21, 23, 0, 19, 36; 0, 0, 0, -5, -4, -5, -1, -4, -8], [0
, -4, 19, -6, 0, 7, 0, -2, -1; 0, -2, 9, 0, -6, 1, 0, -4, -1; 0, 0, 4, 0, 0,
 2, 0, 0, 4; 0, -1, 5, 0, 0, 3, -6, -2, 0; 0, -4, 20, 0, 0, 12, 0, -2, 0; 0,
 0, -7, 0, 0, -5, 0, 0, -7; 1, -2, 5, 0, 0, 3, 0, 0, 0; 0, 7, -35, 0, 0, -21
, 0, 2, 0; 0, 0, 7, 0, 0, 5, 0, 0, 1], [0, -1, 4, -10, -8, -9, 8, -4, -4; 0,
 -1, 2, -2, -4, -3, 6, -2, -2; 0, -2, 1, 0, 0, -1, 2, 0, 1; 0, -2, 0, 0, -1,
 -2, 4, 0, 2; 0, -1, 5, -8, -8, -7, 10, -4, -4; 0, 3, -1, 2, 2, 4, -8, 0, -3
; 0, 0, 1, -1, -2, -1, 2, -1, -1; 1, -2, -9, 16, 17, 13, -10, 10, 12; 0, 1, 
2, -4, -4, -3, 2, -2, -2], [0, 5, 8, -17, -10, -7, 20, -2, 3; 0, 2, 3, 1, -4
, 2, 20, 2, 9; 0, 0, 0, 5, 4, 5, 16, 7, 17; 0, -1, -1, 2, 0, 0, 15, 4, 13; 0
, 6, 9, -9, -9, 0, 30, 1, 10; 0, 0, 0, 0, 0, 0, -28, -7, -21; 0, 1, 2, -1, -
3, 0, 4, -1, 0; 0, -14, -21, 21, 21, 0, -21, 7, 0; 1, 5, 5, -5, -4, 2, 4, 0,
 3]], 0, [9, 3, 3, 0, 0, 9, 0, 6, 9]]
norm(u): 1
norm(t): 1
trace(u): 1
trace(t): 1
u+t: 1
u*t: 1
u^3: 1
w^-1 L: 1
w^-1 R: 1
w^-1*u: [Mod(0, x^3 - 21*x + 7), Mod(Mod(1, y), x^3 - 21*x + 7), Mod(0, x^3 
- 21*x + 7)]~
u*w^-1: [Mod(0, x^3 - 21*x + 7), Mod(Mod(1, y), x^3 - 21*x + 7), Mod(0, x^3 
- 21*x + 7)]~
charpol(w): Y^3 - 21*Y^2 + 1179*Y + 9447301/28
eval charpol: 1
trace(w): 1
norm(w): 1
dim: 1
absdim: 1
iscommutative: 1
issemisimple: 1
issimple: 1
algleftmultable w+ww: 1
algleftmultable w*ww: 1
alg(basis(w)): 1
alg(basis(ww)): 1
basis(w)+ww: 1
basis(w)-ww: 1
w+basis(ww): 1
w-basis(ww): 1
basis(w)*ww: 1
w*basis(ww): 1
basis(w)^2: 1
basis(ww)^2: 1
basis(w)\ww: 1
w\basis(ww): 1
basis(ww)\w: 1
wwbasis(w): 1
basis(w)^-1: 1
basis(ww)^-1: 1
basis(w)/ww: 1
w/basis(ww): 1
basis(ww)/w: 1
ww/basis(w): 1
trace(basis(w)): 1
trace(basis(ww)): 1
alg(basis(w)) 2: 1
alg(basis(ww)) 2: 1
basis(w)+ww 2: 1
basis(w)-ww 2: 1
w+basis(ww) 2: 1
w-basis(ww) 2: 1
basis(w)*ww 2: 1
w*basis(ww) 2: 1
basis(w)^2 2: 1
basis(ww)^2 2: 1
basis(w)ww 2: 1
wbasis(ww) 2: 1
basis(ww)w 2: 1
wwbasis(w) 2: 1
basis(w)^-1 2: 1
basis(ww)^-1 2: 1
basis(w)/ww 2: 1
w/basis(ww) 2: 1
basis(ww)/w 2: 1
ww/basis(w) 2: 1
trace(basis(w)) 2: 1
trace(basis(ww)) 2: 1
alg(basis(w)) 3: 1
alg(basis(ww)) 3: 1
basis(w)+ww 3: 1
basis(w)-ww 3: 1
w+basis(ww) 3: 1
w-basis(ww) 3: 1
basis(w)*ww 3: 1
w*basis(ww) 3: 1
basis(w)^2 3: 1
basis(ww)^2 3: 1
basis(w)ww 3: 1
wbasis(ww) 3: 1
basis(ww)w 3: 1
wwbasis(w) 3: 1
basis(w)^-1 3: 1
basis(ww)^-1 3: 1
basis(w)/ww 3: 1
w/basis(ww) 3: 1
basis(ww)/w 3: 1
ww/basis(w) 3: 1
trace(basis(w)) 3: 1
trace(basis(ww)) 3: 1
radical: 1
iscommutative cyc 3: 1
issemisimple cyc 3: 1
issimple cyc 3: 1
algleftmultable/Q w+ww: 1
algleftmultable/Q w*ww: 1
alg(basis(w))/Q: 1
alg(basis(ww))/Q: 1
basis(w)+ww/Q: 1
basis(w)-ww/Q: 1
w+basis(ww)/Q: 1
w-basis(ww)/Q: 1
basis(w)*ww/Q: 1
w*basis(ww)/Q: 1
basis(w)^2/Q: 1
basis(ww)^2/Q: 1
basis(w)ww/Q: 1
wbasis(ww)/Q: 1
basis(ww)w/Q: 1
wwbasis(w)/Q: 1
basis(w)^-1/Q: 1
basis(ww)^-1/Q: 1
basis(w)/ww/Q: 1
w/basis(ww)/Q: 1
basis(ww)/w/Q: 1
ww/basis(w)/Q: 1
trace(basis(w))/Q: 1
trace(basis(ww))/Q: 1
radical/Q: 1
iscommutative /Q: 1
issemisimple /Q: 1
issimple /Q: 1
Suite: table algebra
algisassociative 0.0: 1
algisassociative 0.1: error("incorrect type in algisassociative (mult. table
) (t_VEC).")
algisassociative 0.2: 1
algisassociative 0.3: error("incorrect type in algisassociative (mult. table
) (t_POL).")
construction 0: [0, 0, 0, 0, 0, 0, [1, 0, 0; 0, 1, 0; 0, 0, 1], [1, 0, 0; 0,
 1, 0; 0, 0, 1], [[1, 0, 0; 0, 1, 0; 0, 0, 1], [0, 0, 0; 1, 0, 1; 0, 0, 0], 
[0, 0, 0; 0, 0, 0; 1, 0, 1]], 0, [3, 0, 1]]
iscyclic 0: 1
dim 0: 1
dim 0b: 1
char 0: 1
a+b 0: 1
a-b 0: 1
a*b 0: 1
b*a 0: 1
a^2 0: 1
b^2 0: 1
e^691691 0: 1
d^101 0: 1
multable(a) 0: 1
multable(b) 0: 1
divl(d,a) 0: 1
divl(d,b) 0: 1
d^-1 0: 1
divr(a,d) 0: 1
divr(b,d) 0: 1
rad(al) 0: 1
ss(al) 0: 1
proj(a) idem 0: 1
idemproj 0: [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], [0, 0, 0,
 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]]]
simple components 0: 1
center al 0: 1
center ss 0: 1
primesubalg ss 0: error("domain error in algprimesubalg: characteristic = 0"
)
x^3 - 2*x^2 + x
charpol annihil(a) 0: 1
x^3 - x^2
charpol annihil(b) 0: 1
x^3
charpol annihil(c) 0: 1
x^3 - 4*x^2 + 5*x - 2
charpol annihil(d) 0: 1
x^3 - 3*x^2 + 3*x - 1
charpol annihil(e) 0: 1
random 0: [1, 0, 0]~
algsimpledec 0: 1
alg_decomposition 0: 1
iscommutative 0: 1
issemisimple 0: 1
issimple 0: 1
issimple ss 0: 1
isdivision 0: 1
algisassociative 2: 1
construction 2: [0, 0, 0, 0, 0, 0, [1, 0, 0; 0, 1, 0; 0, 0, 1], [1, 0, 0; 0,
 1, 0; 0, 0, 1], [[1, 0, 0; 0, 1, 0; 0, 0, 1], [0, 0, 0; 1, 0, 1; 0, 0, 0], 
[0, 0, 0; 0, 0, 0; 1, 0, 1]], 2, [1, 0, 1]]
iscyclic 2: 1
dim 2: 1
char 2: 1
a+b 2: 1
a-b 2: 1
a*b 2: 1
b*a 2: 1
a^2 2: 1
b^2 2: 1
multable(a) 2: 1
multable(b) 2: 1
divl(un,a) 2: 1
divl(un,b) 2: 1
un^-1 2: 1
divr(a,un) 2: 1
divr(b,un) 2: 1
rad(al) 2: 1
ss(al) 2: 1
proj(a) idem 2: 1
idemproj 2: [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 2, [1]], [0, 0, 0,
 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 2, [1]]]
simple components 2: 1
center al 2: 1
center ss 2: 1
primesubalg ss 2: 1
x^3 + x
charpol annihil(a) 2: 1
x^3 + x^2
charpol annihil(b) 2: 1
x^3
charpol annihil(c) 2: 1
random 2: [1, 0, 0]~
algsimpledec 2: 1
alg_decomposition 2: 1
iscommutative 2: 1
issemisimple 2: 1
issimple 2: 1
issimple ss 2: 1
matrix trace 2: 1
matrix norm 2: 1
norm 2: 1
construction 3: [0, 0, 0, 0, 0, 0, [1, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0, 1]
, [0, 0; 1, 0]], 3, [2, 0]]
iscyclic 3: 1
dim 3: 1
char 3: 1
a+b 3: 1
a-b 3: 1
a*b 3: 1
b*a 3: 1
a^2 3: 1
b^2 3: 1
a^691691 3: 1
multable(a) 3: 1
multable(b) 3: 1
algdivl(a,b) 3: 1
a^-1 3: 1
algdivr(b,a) 3: 1
rad(al) 3: 1
ss(al) 3: 1
center al 3: 1
center ss 3: 1
primesubalg ss 3: 1
x^2 + x + 1
charpol annihil(a) 3: 1
x^2
charpol annihil(b) 3: 1
random 3: [1, 0]~
algsimpledec 3: 1
alg_decomposition 3: 1
iscommutative 3: 1
issemisimple 3: 1
issemisimple ss 3: 1
issimple 3: 1
issimple ss 3: 1
construction 3c: [0, 0, 0, 0, 0, 0, [1, 0, 0; 0, 1, 0; 0, 0, 1], [1, 0, 0; 0
, 1, 0; 0, 0, 1], [[1, 0, 0; 0, 1, 0; 0, 0, 1], [0, 0, 0; 1, 0, 0; 0, 1, 0],
 [0, 0, 0; 0, 0, 0; 1, 0, 0]], 3, [0, 0, 0]]
iscyclic 3c: 1
dim 3c: 1
char 3c: 1
a+b 3c: 1
a-b 3c: 1
a*b 3c: 1
b*a 3c: 1
a^2 3c: 1
b^2 3c: 1
a^691691 3c: 1
multable(a) 3c: 1
multable(b) 3c: 1
algdivl(a,b) 3c: 1
a^-1 3c: 1
algdivr(b,a) 3c: 1
rad(al) 3c: 1
ss(al) 3c: 1
center al 3c: 1
center ss 3c: 1
primesubalg ss 3c: 1
x^3 + 2
charpol annihil(a) 3c: 1
x^3
charpol annihil(b) 3c: 1
random 3c: [1, 0, 0]~
algsimpledec 3c: 1
alg_decomposition 3c: 1
iscommutative 3c: 1
issemisimple 3c: 1
issemisimple ss 3c: 1
issimple 3c: 1
issimple ss 3c: 1
construction 2b: [0, 0, 0, 0, 0, 0, [1, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0, 1
], [0, 1; 1, 1]], 2, [0, 1]]
iscyclic 2b: 1
dim 2b: 1
char 2b: 1
a+b 2b: 1
a-b 2b: 1
a*b 2b: 1
b*a 2b: 1
a^2 2b: 1
b^2 2b: 1
a^691691 2b: 1
multable(a) 2b: 1
multable(b) 2b: 1
divl(a,b) 2b: 1
a^-1 2b: 1
divr(b,a) 2b: 1
rad(al) 2b: 1
center al 2b: 1
primesubalg al 2b: 1
x^2 + x + 1
charpol annihil(a) 2b: 1
x^2 + x + 1
charpol annihil(b) 2b: 1
random 2b: [1, 0]~
algsimpledec 2b: 1
alg_decomposition 2b: 1
iscommutative 2b: 1
issemisimple 2b: 1
issimple 2b: 1
issimple,1 2b: 1
construction 3b: [0, 0, 0, 0, 0, 0, [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 
0, 0, 1], [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [[1, 0, 0, 0; 0,
 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, 1, 0, 0; 1, 0, 0, 0; 0, 0, 1, 0; 0, 0
, 0, 2], [0, 0, 0, 2; 0, 0, 0, 2; 1, 2, 0, 0; 0, 0, 0, 0], [0, 0, 2, 0; 0, 0
, 1, 0; 0, 0, 0, 0; 1, 1, 0, 0]], 3, [1, 0, 0, 0]]
iscyclic 3b: 1
dim 3b: 1
char 3b: 1
a+b 3b: 1
a-b 3b: 1
a*b 3b: 1
b*a 3b: 1
a^2 3b: 1
b^2 3b: 1
a^691691 3b: 1
b^691691 3b: 1
multable(a) 3b: 1
multable(b) 3b: 1
divl(a,b) 3b: 1
a^-1 3b: 1
divr(b,a) 3b: 1
rad(al) 3b: 1
center al 3b: 1
primesubalg al 3b: 1
x^4 + x^2 + 1
charpol annihil(a) 3b: 1
x^4 + 2*x^3 + x^2
charpol annihil(b) 3b: 1
x^4
charpol annihil(c) 3b: 1
random 3b: [1, 0, 0, 1]~
algsimpledec 3b: 1
alg_decomposition 3b: 1
iscommutative 3b: 1
issemisimple 3b: 1
issimple 3b: 1
construction 2c: [0, 0, 0, 0, 0, 0, [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 
0, 0, 1], [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [[1, 0, 0, 0; 0,
 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, 0, 1, 0; 1, 0, 0, 1; 0, 0, 0, 0; 0, 0
, 1, 0], [0, 0, 0, 0; 0, 0, 0, 0; 1, 0, 0, 0; 0, 1, 0, 0], [0, 0, 0, 0; 0, 0
, 0, 0; 0, 0, 1, 0; 1, 0, 0, 1]], 2, [0, 0, 0, 0]]
iscyclic 2c: 1
dim 2c: 1
char 2c: 1
a+b 2c: 1
a-b 2c: 1
a*b 2c: 1
b*a 2c: 1
a^2 2c: 1
b^2 2c: 1
a^691691 2c: 1
b^691691 2c: 1
c^691691 2c: 1
multable(a) 2c: 1
multable(b) 2c: 1
divl(c,a) 2c: 1
divl(c,b) 2c: 1
c^-1 2c: 1
divr(a,c) 2c: 1
divr(b,c) 2c: 1
rad(al) 2c: 1
center al 2c: 1
primesubalg al 2c: 1
x^4
charpol annihil(a) 2c: 1
x^4 + x^2
charpol annihil(b) 2c: 1
x^4 + x^2 + 1
charpol annihil(c) 2c: 1
random 2c: [1, 0, 0, 1]~
algsimpledec 2c: 1
alg_decomposition 2c: 1
iscommutative 2c: 1
issemisimple 2c: 1
issimple 2c: 1
construction 5: [0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]]
iscyclic 5: 1
dim 5: 1
char 5: 1
a+b 5: 1
a-b 5: 1
a*b 5: 1
b*a 5: 1
a^2 5: 1
b^2 5: 1
a^691691 5: 1
multable(a) 5: 1
multable(b) 5: 1
divl(a,b) 5: 1
a^-1 5: 1
divr(a,b) 5: 1
rad(al) 5: 1
center al 5: 1
primesubalg al 5: 1
x + 3
charpol annihil(a) 5: 1
x + 2
charpol annihil(b) 5: 1
random 5: [1]~
algsimpledec 5: 1
alg_decomposition 5: 1
iscommutative 5: 1
issemisimple 5: 1
issimple 5: 1
construction 0b: [0, 0, 0, 0, 0, 0, [1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 1, 
0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 1,
 0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [[1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 
1, 0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [0, 0, 1, 0, 0; 1, 0, 0, 1, 0; 0, 0,
 0, 0, 0; 0, 0, -1, 0, 0; 0, 1, -1, -1, 1], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1
, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 0, 0, 0], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 
0, 0, 1, 0, 0; 1, 0, 0, 1, 0; 0, 0, 0, 0, 0], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 1, 0, 0, 1]], 0, [5, 1, 0, 2, 1]]
iscyclic 0b: 1
dim 0b: 1
char 0b: 1
a+b 0b: 1
a-b 0b: 1
a*b 0b: 1
b*a 0b: 1
a^2 0b: 1
b^2 0b: 1
a^691691 0b: 1
b^691 0b: 1
multable(a) 0b: 1
multable(b) 0b: 1
divl(b,a) 0b: 1
b^-1 0b: 1
divr(a,b) 0b: 1
rad(al) 0b: 1
idemproj 0b: [[0, 0, 0, 0, 0, 0, [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 
0, 1], [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [[1, 0, 0, 0; 0, 1,
 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, 0, 1, 0; 1, 0, 0, 1; 0, 0, 0, 0; 0, 0, -
1, 0], [0, 0, 0, 0; 0, 0, 0, 0; 1, 0, 0, 0; 0, 1, 0, 0], [0, 0, 0, 0; 0, 0, 
0, 0; 0, 0, 1, 0; 1, 0, 0, 1]], 0, [4, 0, 0, 2]], [0, 0, 0, 0, 0, 0, Mat(1),
 Mat(1), [Mat(1)], 0, [1]]]
simple components 0b: 1
mt M2 component 0b: 1
center al 0b: 1
primesubalg al 0b: error("domain error in algprimesubalg: characteristic = 0
")
x^5 - 4*x^4 + 6*x^3 - 4*x^2 + x
charpol annihil(a) 0b: 1
x^5 - 6*x^4 + 14*x^3 - 16*x^2 + 9*x - 2
charpol annihil(b) 0b: 1
random 0b: [1, 0, 0, 1, 1]~
algsimpledec 0b: 1
alg_decomposition 0b: 1
subalg M2(Q): 1
iscommutative 0b: 1
issemisimple 0b: 1
issimple 0b: 1
construction 3d: [0, 0, 0, 0, 0, 0, [1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 1, 
0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 1,
 0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [[1, 0, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 
1, 0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1], [0, 0, 1, 0, 0; 1, 0, 0, 1, 0; 0, 0,
 0, 0, 0; 0, 0, 2, 0, 0; 0, 1, 2, 2, 1], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0
, 0, 0, 0; 0, 1, 0, 0, 0; 0, 0, 0, 0, 0], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 0, 
0, 1, 0, 0; 1, 0, 0, 1, 0; 0, 0, 0, 0, 0], [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 0,
 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 1, 0, 0, 1]], 3, [2, 1, 0, 2, 1]]
iscyclic 3d: 1
dim 3d: 1
char 3d: 1
a+b 3d: 1
a-b 3d: 1
a*b 3d: 1
b*a 3d: 1
a^2 3d: 1
b^2 3d: 1
a^691691 3d: 1
b^691 3d: 1
multable(a) 3d: 1
multable(b) 3d: 1
divl(b,a) 3d: 1
b^-1 3d: 1
divr(a,b) 3d: 1
rad(al) 3d: 1
idemproj 3d: [[0, 0, 0, 0, 0, 0, [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 
0, 1], [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [[1, 0, 0, 0; 0, 1,
 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, 0, 1, 0; 1, 0, 0, 1; 0, 0, 0, 0; 0, 0, 2
, 0], [0, 0, 0, 0; 0, 0, 0, 0; 1, 0, 0, 0; 0, 1, 0, 0], [0, 0, 0, 0; 0, 0, 0
, 0; 0, 0, 1, 0; 1, 0, 0, 1]], 3, [1, 0, 0, 2]], [0, 0, 0, 0, 0, 0, Mat(1), 
Mat(1), [Mat(1)], 3, [1]]]
simple components 3d: 1
mt M2 component 3d: 1
center al 3d: 1
primesubalg al 3d: 1
x^5 + 2*x^4 + 2*x^2 + x
charpol annihil(a) 3d: 1
x^5 + 2*x^3 + 2*x^2 + 1
charpol annihil(b) 3d: 1
random 3d: [1, 0, 0, 1, 1]~
algsimpledec 3d: 1
alg_decomposition 3d: 1
subalg M2(F3): 1
iscommutative 3d: 1
issemisimple 3d: 1
issimple 3d: 1
issimple,1 3d: 1
maxorder assoc: 1
natorder assoc: 1
spl(1): 1
spl(i): 1
spl(j): 1
spl(k): 1
spl(basis(1)): 1
spl(basis(i)): 1
spl(basis(j)): 1
spl(basis(k)): 1
spl(a*1): 1
spl(a*i): 1
spl(a*j): 1
spl(a*k): 1
spl(b*1): 1
spl(b*i): 1
spl(b*j): 1
spl(b*k): 1
nattomax 1: 1
nattomax 2: 1
ord*invord=id: 1
spl additive: 1
spl multiplicative: 1
changebasis bug 1: 1
changebasis bug 2: 1
changebasis bug 3: 1
changebasis bug 4: 1
algtableinit segfault bug: 
1
center of CSA: 1
radical of CSA: 1
decomposition of CSA: 1
alg_decomposition of CSA: 1
alsimple bug
0
tests for al_CSA: 
1
1
algebra:
csa getcenter: 1
csa getsplitting: 1
getrelmultable: 1
getsplittingdata:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
hasse invariants:
hassei csa: error("sorry, computation of Hasse invariants over table CSA is 
not yet implemented.")
hassef cas: error("sorry, computation of Hasse invariants over table CSA is 
not yet implemented.")
hasse csa: error("sorry, computation of Hasse invariants over table CSA is n
ot yet implemented.")
csa splitting pol: 1
csa basis: 1
csa invbasis: 1
csa absdim: 1
csa char: 1
csa deg: 1
csa dim: 1
csa absdim: 1
csa type: 1
csa iscommutative: 1
csa issemisimple: 1
elements:
[0, Mod(y, y^3 - y + 1), 0, 0]~
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]~
csa add: 1
csa neg: 1
csa neg 2: 1
csa sub: 1
csa mul: 1
csa mul 2: 1
csa sqr: 1
csa sqr 2: 1
csa mt: 1
csa inv: 1
csa inv 2: 1
csa divl: 1
csa pow: 1
csa mul 3: 1
csa mul 4: 1
csa pow 2: 1
csa sub 2: 1
csa sub 3: 1
csa inv 3: 1
csa inv 4: 1
csa inv 5: 1
csa trace: 1
csa trace 2: 1
1
testcharpol
1
1
1
testcharpol2
1
1
1
testnorm
1
1
1
testnorm2
1
1
1
examples from docu
0
[2, 2]~
0
1
[Mod(Mod(-1/3, y), x^2 + 1), Mod(Mod(2/3, y), x^2 + 1)]~
0
1
1
[Mod(-2/5*x - 1/5, x^2 + 1), 0]~
[0, 2, 0, -1, 2, 0, 0, 0]~
[Mod(Mod(y, y^2 - 5), x^2 - 2), 1]~
[Mod(Mod(-1/2*y - 2, y^2 - 5)*x + Mod(-1/4*y + 5/4, y^2 - 5), x^2 - 2), Mod(
Mod(-3/4*y + 7/4, y^2 - 5), x^2 - 2)]~
[0, 1, 0, 0, 2, -3, 0, 0]~
[[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 2, [1]], [0, 0, 0, 0, 0, 0, [1
, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0, 1], [0, 1; 1, 1]], 2, [0, 1]]]

[1 0]

[0 1]

[0 0]

[0, 0, 0, 0, 0, 0, [1, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0, 1], [0, 1; 1, 1]],
 2, [0, 1]]
[[0, 0, 0, 0, 0, 0, [1, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0, 1], [0, 1; 1, 1]]
, 2, [0, 1]], [1, 0; 0, 0; 0, 1]]
1
0
0
0
0
1
[[[2, [2, 0]~, 1, 2, 1], [3, [3, 0]~, 1, 2, 1]], Vecsmall([0, 1])]
12960000
12960000
12
y^3 - y + 1
2
4
-1/3*x^2 + 1/3*x + 26/3
Mod(-77, y)
13
1
[[[2, [2, 0]~, 1, 2, 1], [19, [10, 2]~, 1, 1, [-8, 2; 2, -10]]], Vecsmall([0
, 1])]
Vecsmall([1, 0])
1/2
0
1/2
0
2
1
2
1
2
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
[1, [2, [2, 0]~, 1, 2, 1]]
x^2 + Mod(-y + 13, y^2 - 5)

[1 0 0 -1]

[0 1 0 -1]

[0 0 1 -1]

[0 0 0  2]


[1 0 0 1/2]

[0 1 0 1/2]

[0 0 1 1/2]

[0 0 0 1/2]

[[1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, -1, 1, 0; 1, 0, 1, 1;
 0, 0, 1, 1; 0, 0, -2, -1], [0, -1, -1, -1; 0, -1, 0, -1; 1, -1, 0, 0; 0, 2,
 0, 1], [0, -1, 0, -1; 0, 0, 1, 0; 0, -1, 1, 0; 1, 1, -1, 1]]
[1/2, -1/2, 0, 0]~
[2, 3, 5, -4]~

[0 -1  1  0]

[1  0  1  1]

[0  0  1  1]

[0  0 -2 -1]


[-1  0 0 -1]

[-1  0 1  0]

[-1 -1 0 -1]

[ 2  0 0  1]

[-1, -1, 0, 0]~

[Mod(x + 1, x^2 + 1)  Mod(x - 1, x^2 + 1)]

[Mod(x + 1, x^2 + 1) Mod(-x + 1, x^2 + 1)]

[8, -8, 0, 0]~
[0, 1, -1, 0]~
11
3
[[1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, y, 0, 0; 1, 0, 0, 0; 
0, 0, 0, y; 0, 0, 1, 0], [0, 0, y^2, 0; 0, 0, 0, -y^2; 1, 0, 0, 0; 0, -1, 0,
 0], [0, 0, 0, -5; 0, 0, y^2, 0; 0, -y, 0, 0; 1, 0, 0, 0]]
x^2 - y
[[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]~, [1, 0; 0, -1; 0, 0; 0, 0; 0, 0; 0, 0
; 0, 1; 0, 0; 0, 0; 0, 0; 0, 0; 0, 0], [1, Mod(x^2, x^6 - 5), Mod(x^4, x^6 -
 5), Mod(x, x^6 - 5), Mod(1/2*x^4 + 1/2*x^3 + 1/2*x + 1/2, x^6 - 5), Mod(1/2
*x^5 + 1/2*x^4 + 1/2*x^2 + 1/2*x, x^6 - 5), Mod(x^2, x^6 - 5), Mod(x^4, x^6 
- 5), Mod(x^4 + x^2 + 1, x^6 - 5), 3, Mod(x^2, x^6 - 5), Mod(x^4, x^6 - 5); 
0, 0, 0, 0, 0, 0, 1, Mod(x^2, x^6 - 5), Mod(1/10*x^4 + 1/2*x^2 + 1/2, x^6 - 
5), Mod(1/2*x^4 - 1/2*x, x^6 - 5), Mod(-1/10*x^3 + 1/2, x^6 - 5), Mod(-1/10*
x^5 + 1/2*x^2, x^6 - 5)]]
2
18
18
1
1
1
matrices over algebras

[[1, 0, 2, 2, 2, 2, 0, -2]~ [-2, -1, 1, 0, -1, -2, -1, 1]~]

[[1, 2, 0, -2, 2, 1, 2, 2]~  [2, -2, -2, 0, -2, 2, -1, 2]~]


[[-2, 0, -2, 2, 0, 2, 0, -2]~ [0, 2, -1, 0, -2, -2, -1, -1]~]

[[0, 2, 0, -2, -1, 1, 1, -1]~      [0, 2, 0, 2, 0, 1, 0, 1]~]

mul alM: [[30, 1, -15, 6, -9, -30, -41, 37]~, [62, -3, -20, 6, -11, -16, -49
, 20]~; [247, 49, -39, 122, -43, 31, -265, 73]~, [168, 74, -22, 68, -91, 48,
 -136, 32]~]
sqr alM: 1
divl alM: 1
divr alM: 1
isinv alM: 1
isinv alM 2: 1
inv alM: 1
inv alM 2: 1
neg alM: 1
sub alM: 1
add alM: 1
algtobasis basistoalg alM 1: 1
algtobasis basistoalg alM 2: 1
algleftmultable add alM: 1
algleftmultable mul alM: 1
algleftmultable sqr alM: 1
algsplitm add alM: 1
algsplitm mul alM: 1
algsplitm sqr alM: 1
algsplitm sqr alM 2: 1
algtrace alM: 1
algtrace alM 2: 1
algtrace prod alM: 1
algnorm alM: 1
algnorm alM 2: 1
algcharpoly alM: 1
algcharpoly alM 2: 1
pow alM: 1
pow alM 2: 1
pow 0 alM: 1

[[Mod(Mod(-1/2*y - 1/2, y^2 - 5)*x + Mod(1/2*y + 1/2, y^2 - 5), x^2 + 1), Mo
d(Mod(1/14*y + 3/14, y^2 - 5)*x + Mod(-1/14*y + 3/14, y^2 - 5), x^2 + 1)]~ [
Mod(-2*x + Mod(3/4*y - 17/4, y^2 - 5), x^2 + 1), Mod(Mod(-1/28*y - 3/4, y^2 
- 5)*x - 6/7, x^2 + 1)]~]

[[Mod(13/2*x + Mod(1/2*y + 4, y^2 - 5), x^2 + 1), Mod(Mod(-1/14*y + 11/7, y^
2 - 5)*x + Mod(1/7*y + 53/14, y^2 - 5), x^2 + 1)]~ [Mod(Mod(-1/4*y - 3/4, y^
2 - 5)*x + Mod(-1/2*y + 7/2, y^2 - 5), x^2 + 1), Mod(Mod(-1/14*y + 23/14, y^
2 - 5)*x + Mod(1/28*y + 43/28, y^2 - 5), x^2 + 1)]~]


[[Mod(Mod(-1/2*y - 3/2, y^2 - 5)*x + Mod(-3/2*y - 1/2, y^2 - 5), x^2 + 1), M
od(Mod(1/14*y + 3/14, y^2 - 5)*x + Mod(-1/14*y - 11/14, y^2 - 5), x^2 + 1)]~
 [Mod(Mod(1/2*y - 1, y^2 - 5)*x + Mod(-3/4*y - 7/4, y^2 - 5), x^2 + 1), Mod(
Mod(1/28*y - 43/28, y^2 - 5)*x + Mod(-1/14*y - 22/7, y^2 - 5), x^2 + 1)]~]

[[Mod(Mod(y + 5/2, y^2 - 5)*x + Mod(-1/4*y + 5/4, y^2 - 5), x^2 + 1), Mod(Mo
d(1/28*y + 1/4, y^2 - 5)*x - 9/14, x^2 + 1)]~ [Mod(Mod(-5/4*y + 9/4, y^2 - 5
)*x + Mod(1/4*y + 3/4, y^2 - 5), x^2 + 1), Mod(Mod(-1/28*y + 25/28, y^2 - 5)
*x + Mod(1/28*y + 39/28, y^2 - 5), x^2 + 1)]~]

mul scalar alM: 1

[  [2, 1, 0, 2]~ [-1, -1, 2, -1]~]

[[2, 1, -1, -2]~  [1, -1, 0, -1]~]


[ [-2, 2, 2, 1]~ [-2, -2, 2, 1]~]

[[-1, -2, 1, 1]~  [0, 1, 0, -1]~]

mul alM t: [[-10, 4, 7, 3]~, [-4, -13, -3, -1]~; [-4, 5, 5, 11]~, [2, -2, 7,
 5]~]
sqr alM t: 1
divl alM t: 1
divr alM t: 1
isinv alM t: 1
isinv alM t 2: 1
inv alM t: 1
inv alM t 2: 1
neg alM t: 1
sub alM t: 1
add alM t: 1
algleftmultable add alM t: 1
algleftmultable mul alM t: 1
algleftmultable sqr alM t: 1
algtrace alM t: 1
algtrace alM t 2: 1
algtrace prod alM t: 1
algnorm alM t: 1
algnorm alM t 2: 1
algcharpoly alM t: 1
algcharpoly alM t 2: 1
pow alM t: 1
pow alM 2 t: 1
pow 0 alM t: 1
csa al2
al2 contains nfabs: 1
[[x^2 + (-2*y^2 + 2*y)*x + (6*y^2 - 5*y + 5), [292133, -1964*x^5 + 4725*x^4 
- 14044*x^3 - 95698*x^2 - 164828*x - 456632, -1406*x^5 + 4870*x^4 - 7674*x^3
 - 64939*x^2 - 119188*x + 52103], [[412, 92, 376; 0, 4, 0; 0, 0, 4], [-9, -7
, 6]~], 1, [], [], [[1, x], [1, 1]], [1, 0; 0, 1], 1, [y^3 - y + 1, [1, 1], 
-23, 1, [[1, 0.75487766624669276004950889635852869189, -1.324717957244746025
9609088544780973407; 1, -0.87743883312334638002475444817926434595 + 0.744861
76661974423659317042860439236724*I, 0.66235897862237301298045442723904867037
 + 0.56227951206230124389918214490937306150*I], [1, 0.7548776662466927600495
0889635852869189, -1.3247179572447460259609088544780973407; 1, -0.1325770665
0360214343158401957487197871, 1.2246384906846742568796365721484217319; 1, -1
.6223005997430906166179248767836567132, 0.1000794665600717690812722823296756
0887], [1, 1, -1; 1, 0, 1; 1, -2, 0], [3, -1, 0; -1, 1, -3; 0, -3, 2], [23, 
16, 10; 0, 1, 0; 0, 0, 1], [7, -2, -3; -2, -6, -9; -3, -9, -2], [23, [-10, -
1, 8; -7, -3, 1; 1, 7, -10]], [23]], [-1.32471795724474602596090885447809734
07, 0.66235897862237301298045442723904867037 + 0.562279512062301243899182144
90937306150*I], [1, y^2 - 1, y], [1, 0, 1; 0, 0, 1; 0, 1, 0], [1, 0, 0, 0, 0
, -1, 0, -1, 1; 0, 1, 0, 1, -1, 0, 0, 0, 1; 0, 0, 1, 0, -1, 0, 1, 0, 0]], [x
^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191, -1406/292133*x^5 + 4870
/292133*x^4 - 7674/292133*x^3 - 64939/292133*x^2 - 119188/292133*x + 52103/2
92133, 0, y^3 - y + 1, x^2 + (-2*y^2 + 2*y)*x + (6*y^2 - 5*y + 5)], [0, [[1,
 0, 0; 0, -1, 0; 0, 0, 1; 0, 0, 0; 0, 0, 0; 0, 0, 0], [1, 0, 0; 0, -1, 0; 0,
 0, 1], 1, Vecsmall([1, 2, 3])]]], [[1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 
0, 0, 1], [0, 0, 1, 0; 1, 0, 0, 1; 0, 0, 0, 0; 0, 0, -1, 0], [0, 0, 0, 0; 0,
 0, 0, 0; 1, 0, 0, 0; 0, 1, 0, 0], [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 1, 0; 1, 0
, 0, 1]], [[0, 1, -1, -1, -2, 2, 0, 0, -2, 2, 0, 0]~, [1, 0; 0, 0; 0, 0; 0, 
0; 0, 0; 0, 0; 0, 1; 0, 0; 0, 0; 0, 0; 0, 0; 0, 0], [1, Mod(-1964/292133*x^5
 + 4725/292133*x^4 - 14044/292133*x^3 - 95698/292133*x^2 - 164828/292133*x -
 456632/292133, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(-
1406/292133*x^5 + 4870/292133*x^4 - 7674/292133*x^3 - 64939/292133*x^2 - 119
188/292133*x + 52103/292133, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x 
+ 191), Mod(-516/6719059*x^5 + 59549/6719059*x^4 - 144104/6719059*x^3 + 5636
9/6719059*x^2 + 2656099/6719059*x + 5563831/6719059, x^6 - 4*x^5 + 15*x^4 + 
14*x^3 + 120*x^2 + 36*x + 191), Mod(-54291/6719059*x^5 + 210489/6719059*x^4 
- 786258/6719059*x^3 - 905381/6719059*x^2 - 6840464/6719059*x - 4510816/6719
059, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(-48132/67190
59*x^5 + 241931/6719059*x^4 - 785055/6719059*x^3 - 523468/6719059*x^2 - 1628
025/6719059*x + 4121552/6719059, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 3
6*x + 191), 0, 0, 0, 0, 0, 0; 0, 0, 0, Mod(-499864/154538357*x^5 - 232506/15
4538357*x^4 + 2075504/154538357*x^3 - 39252216/154538357*x^2 - 107292314/154
538357*x - 129681996/154538357, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36
*x + 191), Mod(1153778/154538357*x^5 - 4109402/154538357*x^4 + 13244560/1545
38357*x^3 + 24564582/154538357*x^2 + 151883496/154538357*x - 10149974/154538
357, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(171940/15453
8357*x^5 - 3019052/154538357*x^4 + 13537158/154538357*x^3 - 30710744/1545383
57*x^2 - 25903390/154538357*x - 175396598/154538357, x^6 - 4*x^5 + 15*x^4 + 
14*x^3 + 120*x^2 + 36*x + 191), 1, Mod(-1964/292133*x^5 + 4725/292133*x^4 - 
14044/292133*x^3 - 95698/292133*x^2 - 164828/292133*x - 456632/292133, x^6 -
 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(-1406/292133*x^5 + 487
0/292133*x^4 - 7674/292133*x^3 - 64939/292133*x^2 - 119188/292133*x + 52103/
292133, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(-516/6719
059*x^5 + 59549/6719059*x^4 - 144104/6719059*x^3 + 56369/6719059*x^2 + 26560
99/6719059*x + 5563831/6719059, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36
*x + 191), Mod(-54291/6719059*x^5 + 210489/6719059*x^4 - 786258/6719059*x^3 
- 905381/6719059*x^2 - 6840464/6719059*x - 4510816/6719059, x^6 - 4*x^5 + 15
*x^4 + 14*x^3 + 120*x^2 + 36*x + 191), Mod(-48132/6719059*x^5 + 241931/67190
59*x^4 - 785055/6719059*x^3 - 523468/6719059*x^2 - 1628025/6719059*x + 41215
52/6719059, x^6 - 4*x^5 + 15*x^4 + 14*x^3 + 120*x^2 + 36*x + 191)]], 0, 0, 0
, [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0
, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 
0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0
, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0;
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 
0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0
, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0,
 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 1], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, -1, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, -1, 0, 0, 0,
 0, 0, 0; 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 0, 0, 0
, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 
0, 0; 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0
], [0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0;
 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0; 0,
 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 
0, 0, 0, 0, 0, -1, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 
0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1; 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0; 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0
, 0, 0, 1, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0; 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0,
 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0,
 0; 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0
; 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1; 1, -1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0
; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0
, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0; 0, 0, 0
, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0; 0, 0, 0,
 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, -1, 1, 0,
 0, 0, 0, 0, 0, 0, -1, 1; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1; 1, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1
, -1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0; 0, 0, 0, 0, 0, 0, -1, 0,
 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0
, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -1, 0, 0, 0, 
0, 0, 0, 0, 0, 0; 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 1, -1, 0, 0, 0
, 0, 0, 0, 0; 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0,
 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0,
 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0
, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 1, 0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 1, 0, 0, 0, 0, 0, 0, 
0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0
, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0; 0, 
0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0; 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1; 1, -
1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
 0, 0, -1, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0,
 1, 0, 0, 0, 0, 0; 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1; 0, 0, 1, 0, 0, 0, 0
, 0, 0, 0, 0, 1; 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]], 0, [12, -4, 0, 0, 0, 
0, 0, 0, 0, 6, -2, 0]]
csa al3
al3 contains nfabs: 1
trivial algebra over a quadratic field
[[x, [1, -x], [1, 1], 1, [], [], [[1], [1]], Mat(1), 1, [y^2 + 1, [0, 1], -4
, 1, [Mat([1, 0.E-57 + 1.0000000000000000000000000000000000000*I]), [1, 1.00
00000000000000000000000000000000000; 1, -1.000000000000000000000000000000000
0000], [1, 1; 1, -1], [2, 0; 0, -2], [2, 0; 0, 2], [1, 0; 0, -1], [1, [0, -1
; 1, 0]], [2]], [0.E-57 + 1.0000000000000000000000000000000000000*I], [1, y]
, [1, 0; 0, 1], [1, 0, 0, -1; 0, 1, 1, 0]], [x^2 + 1, -x, -1, y^2 + 1, x], [
[x^2 + 1, [0, 1], -4, 1, [Mat([1, 0.E-77 + 1.0000000000000000000000000000000
000000*I]), [1, 1.0000000000000000000000000000000000000; 1, -1.0000000000000
000000000000000000000000], [1, 1; 1, -1], [2, 0; 0, -2], [2, 0; 0, 2], [1, 0
; 0, -1], [1, [0, -1; 1, 0]], []], [0.E-77 + 1.00000000000000000000000000000
00000000*I], [1, x], [1, 0; 0, 1], [1, 0, 0, -1; 0, 1, 1, 0]], [[1, 0; 0, -1
], [1, 0; 0, -1], 1, Vecsmall([1, 2])]]], [Mod(y, y^2 + 1)], Mod(1, y^2 + 1)
, Vecsmall([]), [[], Vecsmall([])], 0, [1, 0; 0, 1], [1, 0; 0, 1], [[1, 0; 0
, 1], [0, -1; 1, 0]], 0, [2, 0]]
[y]~
[-2*y + 1]~
[-3, 1]~
[-y + 1]~
[-3, 2]~
[Mod(Mod(y + 2, y^2 + 1), x)]~
[-1/5, 7/5]~
[-1/5, 7/5]~
[Mod(Mod(-y, y^2 + 1), x)]~
[1, 2]~

[Mod(Mod(y, y^2 + 1), x)]


[ 0 1]

[-1 0]

x + Mod(2*y - 1, y^2 + 1)
Mod(-y - 3, y^2 + 1)
Mod(-y - 3, y^2 + 1)
1
1
1
0
0
1
1
1
0
[]
trivial algebra over Q
[[x, [1], [1, 1], 1, [], [], [[1], [1]], Mat(1), 1, [y, [1, 0], 1, 1, [Mat(1
), Mat(1), Mat(1), Mat(1), 1, Mat(1), [1, 0], []], [0.E-57], [1], Mat(1), Ma
t(1)], [x, 0, 0, y, x], [[x, [1, 0], 1, 1, [Mat(1), Mat(1), Mat(1), Mat(1), 
1, Mat(1), [1, 0], []], [0.E-77], [1], Mat(1), Mat(1)], [Mat(1), Mat(1), 1, 
Vecsmall([1])]]], [0], Mod(1, y), Vecsmall([0]), [[], Vecsmall([])], 0, Mat(
1), Mat(1), [Mat(1)], 0, [1]]
[-2]~
[1/3]~
[4/5]~
[-5/3]~
[14/5]~
[-2/3]~
[12/5]~
[12/5]~
[-1/2]~
[1/3]~

[-2]


[Mod(1/3, x)]

x - 1/3
4/5
4/5
1
1
1
0
0
1
1
1
0
[]
trivial CSA over Q
[Mod(9, y)]~
[4]~
nontrivial CSA over Q
[Mod(0, y), Mod(12, y), Mod(6, y), Mod(12, y)]~
[-81, 27, 36, 45]~
empty matrices
-v: 1
v^(-1): 1
v^n: 1
v^0: 1
mt(v)1
spl(v)1
trace(v): 1
norm(v): 1
charpoly(v): 1
v+v: 1
v-v: 1
v*v: 1
v/v: 1
v\v: 1
v*nv: 1
v*v 2: 1
trace(v) char 2: 1
[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]]
[12]~
[-1/7]~
[83/7]~
[85/7]~
[-12/7]~
[-12]~
[1/12]~
[1/49]~
[-1/84]~
12
-1/7
x - 12

[-1/7]

[1]~
1
1
1
1
trivial tensor product
1
1
splitting a nasty commutative algebra
1
1
1
1
non associative algebra
0
csa without maximal order
simplify bug #1671
testing simplify: degree 1 cyclic over Q
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
testing simplify: degree 1 cyclic over Q(i)
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
testing simplify: degree 1 csa over Q
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
testing simplify: degree 1 csa over Q(i)
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
testing simplify: quatalg over Q(s5)
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
testing simplify: quatalg csa over Q
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

[1   0]

[0   0]

[0 1/2]

[0   0]

  ***   at top-level: algsplittingfield(almt)
  ***                 ^-----------------------
  *** algsplittingfield: incorrect type in alg_get_splittingfield [use alginit] (t_VEC).
  ***   at top-level: algdegree(almt)
  ***                 ^---------------
  *** algdegree: incorrect type in alg_get_degree [use alginit] (t_VEC).
  ***   at top-level: alghassei(almt)
  ***                 ^---------------
  *** alghassei: incorrect type in alg_get_hasse_i [use alginit] (t_VEC).
  ***   at top-level: alghassef(almt)
  ***                 ^---------------
  *** alghassef: incorrect type in alg_get_hasse_f [use alginit] (t_VEC).
  ***   at top-level: algrandom(1,1)
  ***                 ^--------------
  *** algrandom: incorrect type in checkalg [please apply alginit()] (t_INT).
  ***   at top-level: algrandom(1,I)
  ***                 ^--------------
  *** algrandom: incorrect type in algrandom (t_COMPLEX).
0
  ***   at top-level: algdim([1,[1],0,0,0,0,0,0,0,0])
  ***                 ^-------------------------------
  *** algdim: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algdim([1,[1],0,0,0,0,0,0,0,0],1)
  ***                 ^---------------------------------
  *** algdim: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algtensor(al,al2)
  ***                 ^-----------------
  *** algtensor: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algtensor(al2,al)
  ***                 ^-----------------
  *** algtensor: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algtensor(1,z,1)
  ***                 ^----------------
  *** algtensor: incorrect type in checkalg [please apply alginit()] (t_INT).
  ***   at top-level: algisassociative([1],0)
  ***                 ^-----------------------
  *** algisassociative: incorrect type in algisassociative (mult. table) (t_VEC).
  ***   at top-level: algisassociative([[1,0;0,2],[0,0;0,0]])
  ***                 ^---------------------------------------
  *** algisassociative: incorrect type in algisassociative (mult. table) (t_VEC).
  ***   at top-level: algmul(almt,a,b)
  ***                 ^----------------
  *** algmul: incorrect type in alg_model (t_COL).
  ***   at top-level: algtomatrix(almt,a,1)
  ***                 ^---------------------
  *** algtomatrix: incorrect type in alg_model (t_COL).
  ***   at top-level: alginv(almt,a)
  ***                 ^--------------
  *** alginv: incorrect type in alg_model (t_COL).
  ***   at top-level: algalgtobasis(almt,a)
  ***                 ^---------------------
  *** algalgtobasis: incorrect type in algalgtobasis [use alginit] (t_VEC).
  ***   at top-level: algbasistoalg(almt,[0,0,0,0]~)
  ***                 ^------------------------------
  *** algbasistoalg: incorrect type in algbasistoalg [use alginit] (t_VEC).
  ***   at top-level: algpoleval(almt,1,a)
  ***                 ^--------------------
  *** algpoleval: incorrect type in algpoleval (t_INT).
  ***   at top-level: algadd(almt,[zero;zero],m)
  ***                 ^--------------------------
  *** algadd: inconsistent dimensions in alM_add (rows).
  ***   at top-level: algadd(almt,[zero;zero;zero],[zero;zero])
  ***                 ^-----------------------------------------
  *** algadd: inconsistent dimensions in alM_add (columns).
  ***   at top-level: algsub(almt,[zero;zero],m)
  ***                 ^--------------------------
  *** algsub: inconsistent dimensions in alM_sub (rows).
  ***   at top-level: algsub(almt,[zero;zero;zero],[zero;zero])
  ***                 ^-----------------------------------------
  *** algsub: inconsistent dimensions in alM_sub (columns).
  ***   at top-level: algmul(almt,m,[zero;zero;zero])
  ***                 ^-------------------------------
  *** algmul: inconsistent dimensions in alM_mul.
  ***   at top-level: algsqr(almt,[zero;zero])
  ***                 ^------------------------
  *** algsqr: inconsistent dimensions in alM_mul.
  ***   at top-level: algdivl(almt,m,zero)
  ***                 ^--------------------
  *** algdivl: forbidden division t_MAT (1x2) \ t_COL (4 elts).
  ***   at top-level: algdivl(almt,m,[zero,zero;zero,zero])
  ***                 ^-------------------------------------
  *** algdivl: inconsistent dimensions in algdivl.
  ***   at top-level: algdivl(almt,m,m)
  ***                 ^-----------------
  *** algdivl: inconsistent dimensions in algdivl (nonsquare).
  ***   at top-level: alginv(almt,m)
  ***                 ^--------------
  *** alginv: inconsistent dimensions in alginv_i (nonsquare).
  ***   at top-level: algtomatrix(almt,m,1)
  ***                 ^---------------------
  *** algtomatrix: inconsistent dimensions in algleftmultable_mat (nonsquare).
  ***   at top-level: algpow(almt,m,3)
  ***                 ^----------------
  *** algpow: inconsistent dimensions in alM_mul.
  ***   at top-level: algtrace(almt,m)
  ***                 ^----------------
  *** algtrace: inconsistent dimensions in algtrace_mat (nonsquare).
  ***   at top-level: algcharpoly(almt,m)
  ***                 ^-------------------
  *** algcharpoly: inconsistent dimensions in algleftmultable_mat (nonsquare).
  ***   at top-level: algcharpoly(alginit(nfinit(y),[-1,-1]),m)
  ***                 ^-----------------------------------------
  *** algcharpoly: incorrect type in easychar (t_MAT).
  ***   at top-level: algnorm(almt,m)
  ***                 ^---------------
  *** algnorm: inconsistent dimensions in algleftmultable_mat (nonsquare).
  ***   at top-level: algnorm(alginit(nfinit(y),[-1,-1]),m)
  ***                 ^-------------------------------------
  *** algnorm: inconsistent dimensions in det.
  ***   at top-level: alginit(nfinit(y),[2,[[],[]],[x]])
  ***                 ^----------------------------------
  *** alginit: incorrect type in Hasse invariant (t_POL).
  ***   at top-level: alginit(nfinit(y),[2,[],[1,1]])
  ***                 ^-------------------------------
  *** alginit: incorrect type in checkhasse [hf] (t_VECSMALL).
  ***   at top-level: alginit(nfinit(y),[2,[[],[]],Vecsmall([1])])
  ***                 ^--------------------------------------------
  *** alginit: domain error in checkhasse: sum(Hasse invariants) != 0
  ***   at top-level: alginit(y,[2,[[],[]],[1]])
  ***                 ^--------------------------
  *** alginit: incorrect type in alginit (t_POL).
  ***   at top-level: alginit(nfinit(y),y)
  ***                 ^--------------------
  *** alginit: incorrect type in alginit (t_POL).
  ***   at top-level: alginit(nfinit(y),[1,2,3,4])
  ***                 ^----------------------------
  *** alginit: incorrect type in alginit (t_VEC).
  ***   at top-level: algtableinit(mt,y)
  ***                 ^------------------
  *** algtableinit: incorrect type in algtableinit (t_POL).
  ***   at top-level: alginit(nfinit(y^2+1),-3)
  ***                 ^-------------------------
  *** alginit: domain error in alg_matrix: n <= 0
  ***   at top-level: alginit(nfinit(x^2+1),3)
  ***                 ^------------------------
  *** alginit: incorrect priority in alginit: variable x >= x
  ***   at top-level: alginit(nfinit(highvar^2+1),3)
  ***                 ^------------------------------
  *** alginit: incorrect priority in alginit: variable x >= highvar
  ***   at top-level: ...t(nfinit(y^2-2),[-1,-1]);algrandom(al,-10)
  ***                                             ^-----------------
  *** algrandom: domain error in algrandom: b < 0
  ***   at top-level: algrelmultable(al)
  ***                 ^------------------
  *** algrelmultable: incorrect type in alg_get_relmultable [algebra not given via mult. table] (t_VEC).
  ***   at top-level: algsplittingdata(al)
  ***                 ^--------------------
  *** algsplittingdata: incorrect type in alg_get_splittingdata [algebra not given via mult. table] (t_VEC).
  ***   at top-level: alghasse(almt,1)
  ***                 ^----------------
  *** alghasse: incorrect type in alghasse [use alginit] (t_VEC).
  ***   at top-level: algindex(almt,1)
  ***                 ^----------------
  *** algindex: incorrect type in algindex [use alginit] (t_VEC).
  ***   at top-level: algisdivision(almt)
  ***                 ^-------------------
  *** algisdivision: sorry, algisdivision for table algebras is not yet implemented.
  ***   at top-level: algissplit(almt)
  ***                 ^----------------
  *** algissplit: incorrect type in algissplit [use alginit] (t_VEC).
  ***   at top-level: algisramified(almt)
  ***                 ^-------------------
  *** algisramified: incorrect type in algisramified [use alginit] (t_VEC).
  ***   at top-level: algramifiedplaces(almt)
  ***                 ^-----------------------
  *** algramifiedplaces: incorrect type in algramifiedplaces [use alginit] (t_VEC).
  ***   at top-level: alghasse(al,-1)
  ***                 ^---------------
  *** alghasse: domain error in is_place_emb: pl <= 0
  ***   at top-level: alghasse(al,3)
  ***                 ^--------------
  *** alghasse: domain error in is_place_emb: pl > 2
  ***   at top-level: alghasse(al,2^100)
  ***                 ^------------------
  *** alghasse: domain error in is_place_emb: pl > 2
  ***   at top-level: alghasse(al,[])
  ***                 ^---------------
  *** alghasse: incorrect type in is_place_emb (t_VEC).
  ***   at top-level: alghasse(al,1/3)
  ***                 ^----------------
  *** alghasse: incorrect type in is_place_emb (t_FRAC).
  ***   at top-level: algtableinit([matid(2),[0,1/2;1,0]])
  ***                 ^------------------------------------
  *** algtableinit: domain error in algtableinit: denominator(mt) != 1
  ***   at top-level: alginit(Q,[matid(2),[0,1/2;1,0]])
  ***                 ^---------------------------------
  *** alginit: domain error in alg_csa_table: denominator(mt) != 1
  ***   at top-level: alginit(Q,[-1/2,-1])
  ***                 ^--------------------
  *** alginit: domain error in alg_hilbert: denominator(a) != 1
  ***   at top-level: alginit(Q,[-1,-1/2])
  ***                 ^--------------------
  *** alginit: domain error in alg_hilbert: denominator(b) != 1
  ***   at top-level: alginit(rnfinit(Q,x^2+1),[-x,-1/2])
  ***                 ^-----------------------------------
  *** alginit: domain error in alg_cyclic: denominator(b) != 1
  ***   at top-level: algsqr([0,0,0,0,0,0,0,0,0,0,0],[]~)
  ***                 ^-----------------------------------
  *** algsqr: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algsqr([0,0,0,0,0,0,0,0,[],0,0],[]~)
  ***                 ^------------------------------------
  *** algsqr: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algsqr([0,0,0,0,0,0,0,0,[0],0,0],[]~)
  ***                 ^-------------------------------------
  *** algsqr: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algsqr([0,0,0,0,0,0,0,0,[[;]],0,0],[]~)
  ***                 ^---------------------------------------
  *** algsqr: incorrect type in alg_model (t_COL).
  ***   at top-level: algsqr([[],0,0,0,0,0,0,0,[[;]],0,0],[]~)
  ***                 ^----------------------------------------
  *** algsqr: incorrect type in checkalg [please apply alginit()] (t_VEC).
  ***   at top-level: algsqr([[],[0],0,0,0,0,0,0,[[;]],0,0],[]~)
  ***                 ^------------------------------------------
  *** algsqr: incorrect type in checkrnf (t_VEC).
  ***   at top-level: algdim([[],[0],0,0,0,0,0,0,[[;]],0,0])
  ***                 ^--------------------------------------
  *** algdim: incorrect type in checkrnf (t_VEC).
  ***   at top-level: algdegree([[],[0],0,0,0,0,0,0,[[;]],0,0])
  ***                 ^-----------------------------------------
  *** algdegree: incorrect type in checkrnf (t_VEC).
  ***   at top-level: algdegree([rnfinit(nfinit(y),x),[[]],0,0,0,0,0
  ***                 ^----------------------------------------------
  *** algdegree: incorrect type in alg_get_degree [use alginit] (t_VEC).
  ***   at top-level: algcenter([rnfinit(nfinit(y),x),[[]],0,0,0,0,0
  ***                 ^----------------------------------------------
  *** algcenter: incorrect type in alg_get_center [use alginit] (t_VEC).
  ***   at top-level: algcentralproj(almt,0)
  ***                 ^----------------------
  *** algcentralproj: incorrect type in alcentralproj (t_INT).
  ***   at top-level: algcentralproj(almt,[zero,zero])
  ***                 ^--------------------------------
  *** algcentralproj: incorrect type in alcentralproj [z[i]'s not surjective] (t_VEC).
  ***   at top-level: algsubalg(almt,0)
  ***                 ^-----------------
  *** algsubalg: incorrect type in algsubalg (t_INT).
  ***   at top-level: algisassociative([])
  ***                 ^--------------------
  *** algisassociative: incorrect type in algisassociative (mult. table) (t_VEC).
  ***   at top-level: algisassociative([matid(2),Mat([1,1])])
  ***                 ^---------------------------------------
  *** algisassociative: incorrect type in algisassociative (mult. table) (t_VEC).
  ***   at top-level: algisassociative([[1,2;3,4],matid(2)])
  ***                 ^--------------------------------------
  *** algisassociative: incorrect type in algisassociative (mult. table) (t_VEC).
  ***   at top-level: algisassociative([matid(1)],[])
  ***                 ^-------------------------------
  *** algisassociative: incorrect type in algisassociative (t_VEC).
  ***   at top-level: algsqr(algtableinit([matid(1)]),[1,2]~)
  ***                 ^---------------------------------------
  *** algsqr: incorrect type in alg_model (t_COL).
  ***   at top-level: algsqr(al,vector(691)~)
  ***                 ^-----------------------
  *** algsqr: incorrect type in alg_model (t_COL).
  ***   at top-level: algsqr(al,[1,2,3,4,5,6,7,f^2]~)
  ***                 ^-------------------------------
  *** algsqr: incorrect type in checkalgx (t_POL).
  ***   at top-level: algsqr(al,[f^3,[]]~)
  ***                 ^--------------------
  *** algsqr: incorrect type in checkalgx (t_VEC).
  ***   at top-level: algmul(al,[;],[1,2]~)
  ***                 ^---------------------
  *** algmul: incorrect type in algmul (t_COL).
  ***   at top-level: algdivl(al,[;],matid(1))
  ***                 ^------------------------
  *** algdivl: impossible inverse in algdivl: [;].
  ***   at top-level: algdivl(al,matid(1),matrix(1,2))
  ***                 ^--------------------------------
  *** algdivl: inconsistent dimensions in algdivl (nonsquare).
  ***   at top-level: alginv(al,[0,0]~)
  ***                 ^-----------------
  *** alginv: impossible inverse in alginv: [0, 0]~.
  ***   at top-level: algalgtobasis(al0mt,[1]~)
  ***                 ^-------------------------
  *** algalgtobasis: incorrect type in algalgtobasis [use alginit] (t_VEC).
  ***   at top-level: algbasistoalg(al0mt,[1]~)
  ***                 ^-------------------------
  *** algbasistoalg: incorrect type in algbasistoalg [use alginit] (t_VEC).
  ***   at top-level: nfgrunwaldwang(nfinit(y),0,[],[],'x)
  ***                 ^------------------------------------
  *** nfgrunwaldwang: incorrect type in nfgrunwaldwang (t_INT).
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],'x-'x,[1])
  ***                 ^---------------------------------------
  *** nfgrunwaldwang: incorrect type in nfgrunwaldwang (t_POL).
  ***   at top-level: alginit(rnfinit(nfinit(y),x),0)
  ***                 ^-------------------------------
  *** alginit: incorrect type in alginit (t_INT).
  ***   at top-level: alginit(rnfinit(nfinit(y),x),[1,2,3,4])
  ***                 ^---------------------------------------
  *** alginit: incorrect type in alginit (t_VEC).
  ***   at top-level: alginit(nfinit(y),[matid(2),matid(2)])
  ***                 ^--------------------------------------
  *** alginit: incorrect type in alg_csa_table (t_VEC).
  ***   at top-level: alginit(nfinit(y),[matid(2),[0,1;1,0]])
  ***                 ^---------------------------------------
  *** alginit: domain error in alg_csa_table: (nonsquare) dimension != 1
  ***   at top-level: nfgrunwaldwang(nfinit(y),0,[],[0])
  ***                 ^----------------------------------
  *** nfgrunwaldwang: incorrect type in nfgrunwaldwang (t_INT).
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],[],[0])
  ***                 ^------------------------------------
  *** nfgrunwaldwang: inconsistent dimensions in nfgrunwaldwang [#Lpr != #Ld].
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],[2],[])
  ***                 ^------------------------------------
  *** nfgrunwaldwang: domain error in nfgrunwaldwang [pl should have r1 components]: #pl != 1
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],[6],[0])
  ***                 ^-------------------------------------
  *** nfgrunwaldwang: sorry, nfgrunwaldwang for non prime-power local degrees (a) is not yet implemented.
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2,3],[2,3],[0])
  ***                 ^-----------------------------------------
  *** nfgrunwaldwang: sorry, nfgrunwaldwang for non prime-power local degrees (b) is not yet implemented.
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],[3],[-1])
  ***                 ^--------------------------------------
  *** nfgrunwaldwang: sorry, nfgrunwaldwang for non prime-power local degrees (c) is not yet implemented.
  ***   at top-level: nfgrunwaldwang(nfinit(y),[[]~],[3],[-1])
  ***                 ^----------------------------------------
  *** nfgrunwaldwang: incorrect type in checkprid (t_COL).
  ***   at top-level: nfgrunwaldwang(nfinit(y),[2],[9],[0])
  ***                 ^-------------------------------------
  *** nfgrunwaldwang: sorry, nfgrunwaldwang for non-prime degree is not yet implemented.
  ***   at top-level: algdegree(A)
  ***                 ^------------
  *** algdegree: incorrect type in alg_get_degree [use alginit] (t_VEC).
  ***   at top-level: algsub(A,1,1)
  ***                 ^-------------
  *** algsub: incorrect type in alg_model (t_INT).
  ***   at top-level: algadd(A,1,1)
  ***                 ^-------------
  *** algadd: incorrect type in alg_model (t_INT).
  ***   at top-level: algneg(A,1)
  ***                 ^-----------
  *** algneg: incorrect type in alg_model (t_INT).
  ***   at top-level: algmul(A,1,1)
  ***                 ^-------------
  *** algmul: incorrect type in alg_model (t_INT).
  ***   at top-level: algsqr(A,1)
  ***                 ^-----------
  *** algsqr: incorrect type in alg_model (t_INT).
  ***   at top-level: algdivl(A,1,1)
  ***                 ^--------------
  *** algdivl: incorrect type in alg_model (t_INT).
  ***   at top-level: algdivr(A,1,1)
  ***                 ^--------------
  *** algdivr: incorrect type in alg_model (t_INT).
  ***   at top-level: alginv(A,1)
  ***                 ^-----------
  *** alginv: incorrect type in alg_model (t_INT).
  ***   at top-level: ...;PR=idealprimedec(K,2);A=alginit(K,[3,[PR,[1]]
  ***                                             ^---------------------
  *** alginit: domain error in checkhasse: Hasse invariant at real place [must be 0 or 1/2] != 0
  ***   at top-level: ...;P3=idealprimedec(K,3);A=alginit(K,[3,[concat(
  ***                                             ^---------------------
  *** alginit: domain error in checkhasse: Hasse invariant at real place [must be 0 or 1/2] != 0
  ***   at top-level: algtensor(alginit(nfinit(y),2),alginit(nfinit(
  ***                 ^----------------------------------------------
  *** algtensor: inconsistent tensor product [not the same center] t_VEC (11 elts) , t_VEC (11 elts).
  ***   at top-level: algtensor(alginit(nfinit(y),2),alginit(nfinit(
  ***                 ^----------------------------------------------
  *** algtensor: sorry, tensor of cylic algebras of non-coprime degrees is not yet implemented.
  ***   at top-level: alginit(nf,[2,[[p2,p2],[1/2,1/2]],[0]])
  ***                 ^---------------------------------------
  *** alginit: error in checkhasse [duplicate prime ideal].
  ***   at top-level: alginit(nf,[2,[[p2,p3],[1/2,1/2]],[0,0]])
  ***                 ^-----------------------------------------
  *** alginit: domain error in checkhasse [hi should have r1 components]: #hi != 1
  ***   at top-level: alginit(nf,[2,[[p2,p3],[1/2,1/2],0],[0]])
  ***                 ^-----------------------------------------
  *** alginit: incorrect type in Hasse invariant (t_VEC).
  ***   at top-level: alginit(nf,[2,[0,[1/2,1/2]],[0]])
  ***                 ^---------------------------------
  *** alginit: incorrect type in Hasse invariant (t_VEC).
  ***   at top-level: alginit(nf,[2,[[p2,p3],0],[0]])
  ***                 ^-------------------------------
  *** alginit: incorrect type in Hasse invariant (t_INT).
  ***   at top-level: alginit(nf,[2,[[p2,p3],[1/2,1/2,0]],[0]])
  ***                 ^-----------------------------------------
  *** alginit: inconsistent dimensions in checkhasse [Lpr and Lh should have same length].
  ***   at top-level: alginit(nf,[2,[[p2,p3],[1/2,1/2]],[1/3]])
  ***                 ^-----------------------------------------
  *** alginit: domain error in hasseconvert [degree should be a denominator of the invariant]: denom(h) ndiv 2
  ***   at top-level: algcharpoly(al,a,'z)
  ***                 ^--------------------
  *** algcharpoly: incorrect priority in algredcharpoly: variable z >= y
  ***   at top-level: algcharpoly(al,[1,2,3]~)
  ***                 ^------------------------
  *** algcharpoly: incorrect type in alg_model (t_COL).
  ***   at top-level: algindex(1,1)
  ***                 ^-------------
  *** algindex: incorrect type in checkalg [please apply alginit()] (t_INT).
  ***   at top-level: algsqr(al,[Mod(1,y),Mod(2,y)]~)
  ***                 ^-------------------------------
  *** algsqr: incorrect type in alg_model (t_COL).
  ***   at top-level: algsqr(al,[Mod(1,y),Mod(2,y)]~)
  ***                 ^-------------------------------
  *** algsqr: incorrect type in alg_model (t_COL).
  ***   at top-level: alfail=alginit(nf,[0,0],'x)
  ***                        ^--------------------
  *** alginit: domain error in rnfequation: issquarefree(B) = 0
  ***   at top-level: algb(al)
  ***                 ^--------
  *** algb: incorrect type in alg_get_b [non-cyclic algebra] (t_VEC).
  ***   at top-level: algaut(al)
  ***                 ^----------
  *** algaut: incorrect type in alg_get_aut [non-cyclic algebra] (t_VEC).
  ***   at top-level: algtableinit([Mat(1)],1)
  ***                 ^------------------------
  *** algtableinit: not a prime number in algtableinit: 1.
  ***   at top-level: algtableinit([Mat(1)],4)
  ***                 ^------------------------
  *** algtableinit: not a prime number in algtableinit: 4.
  ***   at top-level: algpoleval(al,x+1,"toto")
  ***                 ^-------------------------
  *** algpoleval: incorrect type in alg_model (t_STR).
  ***   at top-level: algpoleval(al,x+1,[1,2,3])
  ***                 ^--------------------------
  *** algpoleval: incorrect type in algpoleval [vector must be of length 2] (t_VEC).
  ***   at top-level: algpoleval(al,x+1,[1,2])
  ***                 ^------------------------
  *** algpoleval: incorrect type in algpoleval [mx must be the multiplication table of x] (t_INT).
  ***   at top-level: algpoleval(al,x+1,[a,mb])
  ***                 ^-------------------------
  *** algpoleval: incorrect type in algpoleval [mx must be the multiplication table of x] (t_MAT).
  ***   at top-level: algpoleval(al,x+1,[1,mb])
  ***                 ^-------------------------
  *** algpoleval: incorrect type in algpoleval [mx must be the multiplication table of x] (t_MAT).
  ***   at top-level: alginit(nfinit(y),["a",[[],[]],[]])
  ***                 ^-----------------------------------
  *** alginit: incorrect type in alginit [degree should be an integer] (t_STR).
  ***   at top-level: alginit(nfinit(y),[1,[[],[]],[]])
  ***                 ^---------------------------------
  *** alginit: domain error in alg_hasse: degree <= 1
  ***   at top-level: alginit(nfinit(y),[0,[[],[]],[]])
  ***                 ^---------------------------------
  *** alginit: domain error in alg_hasse: degree <= 1
new algsimpledec
0
[0, [[[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], Mat([1, 1, 0]), 
[0; 1; 0]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], Mat([1, 0
, 0]), [1; -1; -1]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], 
Mat([1, 0, 1]), [0; 0; 1]]]]
0
[0, [[[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]], Mat([1, 1, 0]), 
[0; 1; 0]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]], Mat([1, 0
, 1]), [0; 0; 1]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]], Ma
t([1, 0, 0]), [1; 4; 4]]]]
[[0; 0; 1], [[[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], Mat([1, 
0, 0]), [1; -1; 0]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 0, [1]], 
Mat([1, 1, 0]), [0; 1; 0]]]]
[[0; 0; 1], [[[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]], Mat([1, 
1, 0]), [0; 1; 0]], [[0, 0, 0, 0, 0, 0, Mat(1), Mat(1), [Mat(1)], 5, [1]], M
at([1, 0, 0]), [1; 4; 0]]]]
norm(,1)
16
Mod(-y + 1, y^2 - 5)
16
16/6561
223225143999841/5764801
1
1
trace(,1)
Mod(2*y + 2, y^2 - 5)
8
8
1
1
1
1
charpoly(,1)
x^2 - 2*y*x - 4*y
x^8 - 40*x^6 - 160*x^5 + 240*x^4 + 3200*x^3 + 9600*x^2 + 12800*x + 6400
x^8 - 40*x^6 - 160*x^5 + 240*x^4 + 3200*x^3 + 9600*x^2 + 12800*x + 6400
1
1
1
more al_MAT tests
add
1
1
1
1
alg/basis
1
1
1
1
1
1
1
1
charpoly
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
inv/div
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
mul
1
1
1
neg
1
1
1
norm
1
1
1
pow
1
1
1
sqr
1
1
1
sub
1
1
1
trace
1
1
1
algtomatrix
1
1
1
1
1
1
1
1
algleftmultable
1
1
1
1
1
1
1
1
1
1
1
1
more al_CSA tests
1
1
1
1
charpoly
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
inv/div
1
1
1
1
1
1
1
1
mul
1
1
1
neg
1
1
1
norm
1
1
1
pow
1
1
1
sqr
1
1
1
sub
1
1
1
trace
1
1
1
algtomatrix
1
1
1
1
1
1
1
1
algleftmultable
1
1
1
1
1
1
1
1
1
1
csa pol/polmod bugs
[[1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, -1, 0, 0; 1, 0, 0, 0;
 0, 0, 0, -1; 0, 0, 1, 0], [0, 0, y, 0; 0, 0, 0, -y; 1, 0, 0, 0; 0, -1, 0, 0
], [0, 0, 0, y; 0, 0, y, 0; 0, 1, 0, 0; 1, 0, 0, 0]]
[Mod(1000/9*y + 4400/81, y^2 - 5), Mod(1000/9*y, y^2 - 5), Mod(1000/9*y, y^2
 - 5), Mod(1000/27*y, y^2 - 5)]~
[Mod(927/1936*y + 2025/1936, y^2 - 5), Mod(-729/1936*y - 8343/9680, y^2 - 5)
, Mod(-729/1936*y - 8343/9680, y^2 - 5), Mod(-243/1936*y - 2781/9680, y^2 - 
5)]~
[Mod(50/9*y, y^2 - 5), Mod(10, y^2 - 5), Mod(10, y^2 - 5), Mod(10/3, y^2 - 5
)]~
1
1
1
1
1
1
1
csa: denom over Z[y] but not over ZK
[[1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1], [0, -1, 0, 0; 1, 0, 0, 0;
 0, 0, 0, -1; 0, 0, 1, 0], [0, 0, 1/2*y - 1/2, 0; 0, 0, 0, -1/2*y + 1/2; 1, 
0, 0, 0; 0, -1, 0, 0], [0, 0, 0, 1/2*y - 1/2; 0, 0, 1/2*y - 1/2, 0; 0, 1, 0,
 0; 1, 0, 0, 0]]
  ***   at top-level: al=alginit(nf,mt*Mod(1,nf.pol))
  ***                    ^----------------------------
  *** alginit: domain error in alg_csa_table: denominator(mt) != 1
al_MAT over al_CSA
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
algleftmultable
1
1
1
1
1
1
nfgrunwaldwang SEGV #1669
x^2 + Mod(-17, y)
  ***   at top-level: nfgrunwaldwang(nfinit(x),[2,3],[1,2],Vecsmall(
  ***                 ^----------------------------------------------
  *** nfgrunwaldwang: incorrect priority in nfgrunwaldwang: variable x >= x

[1]


[1]


[1]


[1/2]


[1/2]

1
  ***   at top-level: algpoleval(al,pol,a)==0
  ***                 ^-----------------------
  *** algpoleval: sorry, algpoleval with x in basis form and pol not in Q[x] is not yet implemented.
  ***   at top-level: algpoleval(al,pol,[;])
  ***                 ^----------------------
  *** algpoleval: incorrect type in algpoleval (t_MAT).
1
1
  ***   at top-level: al2=algtensor(al,al)
  ***                     ^----------------
  *** algtensor: sorry, tensor of non-cyclic algebras is not yet implemented.
  ***   at top-level: al2=algtensor(al,al)
  ***                     ^----------------
  *** algtensor: sorry, tensor of non-cyclic algebras is not yet implemented.
Total time spent: 1300
